package com.getyoteam.budamind.fragmentimport android.content.Intentimport android.net.Uriimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.core.content.ContextCompatimport androidx.fragment.app.Fragmentimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport com.getyoteam.budamind.Model.ChapterListModelimport com.getyoteam.budamind.Model.MomentListModelimport com.getyoteam.budamind.Model.TaskListModelimport com.getyoteam.budamind.Model.TaskResponseimport com.getyoteam.budamind.MyApplicationimport com.getyoteam.budamind.Rimport com.getyoteam.budamind.activity.PlayTaskMomentsActivityimport com.getyoteam.budamind.activity.PlayTaskSoundActivityimport com.getyoteam.budamind.activity.WalletActivityimport com.getyoteam.budamind.adapter.HomeTaskAdapterimport com.getyoteam.budamind.interfaces.ApiUtilsimport com.getyoteam.budamind.testaudioexohls.PlayerExoTaskActivityimport com.getyoteam.budamind.utils.Utilsimport com.google.firebase.dynamiclinks.DynamicLinkimport com.google.firebase.dynamiclinks.FirebaseDynamicLinksimport com.google.gson.Gsonimport com.google.gson.reflect.TypeTokenimport kotlinx.android.synthetic.main.fragment_task.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass TaskFragmentNew() : Fragment(), SwipeRefreshLayout.OnRefreshListener ,HomeTaskAdapter.OnTaskHomeAdapterInteractionListener{    var sharingLink: Uri? = null    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_task, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)//        tvHeader.text = "00"        val c1 = ContextCompat.getColor(requireContext(), R.color.app_pink_color)        swipeToRefresh.setColorSchemeColors(c1)        swipeToRefresh.setOnRefreshListener(this)//        swipeToRefresh.setEnabled(true);        layBalance.setOnClickListener {            val intent = Intent(requireContext(), WalletActivity::class.java)            startActivity(intent)        }        tvInviteFriends.setOnClickListener {            progressBarSubmit.visibility = View.VISIBLE          shareLink()        }        try {            val a = " $"+"CHI"            val blnc = Utils.formatBal(MyApplication.prefs!!.myBalance.toBigInteger())            tvBalance.text = blnc +a        }catch (e :Exception){            e.printStackTrace()        }        rvTasks.isNestedScrollingEnabled = false    }    private fun shareLink(){        val userId = MyApplication.prefs!!.userId        FirebaseDynamicLinks.getInstance().createDynamicLink()//            .setLink(Uri.parse("https://www.budacoin.org/${userId}"))            .setLink(Uri.parse("https://metatateshare.page.link/${userId}"))            .setDomainUriPrefix("https://metatateshare.page.link")            .setAndroidParameters(DynamicLink.AndroidParameters.Builder().build())            .setIosParameters(DynamicLink.IosParameters.Builder("com.getyoteamApp.budamind").build())            .buildShortDynamicLink()            .addOnSuccessListener { result ->                progressBarSubmit.visibility = View.INVISIBLE             val  sharingLink = result.shortLink                Log.d("mytag", "sharingLink - ${sharingLink}")                val intent = Intent(Intent.ACTION_SEND)                /*This will be the actual content you wish you share.*/                intent.type = "text/plain"                /*Applying information Subject and Body.*/                intent.putExtra(                    Intent.EXTRA_SUBJECT,                    "Metatate"                )                intent.putExtra(Intent.EXTRA_TEXT, sharingLink.toString())                startActivity(Intent.createChooser(intent, "Share"))            }            .addOnFailureListener {                progressBarSubmit.visibility = View.INVISIBLE                Log.d("mytag", "exception - ${it.localizedMessage}")                Toast.makeText(requireContext(), "Something went wrong, Please try Again", Toast.LENGTH_SHORT).show()            }    }    override fun onResume() {        super.onResume()        val taskdata = MyApplication.prefs!!.dailyTaskList.toString()        if (taskdata.isNotEmpty()){            setData()        }        getTaskDetail()    }    private fun getTaskDetail() {        val userId = MyApplication.prefs!!.userId        val authToken = MyApplication.prefs!!.authToken        val call = ApiUtils.getAPIService().getTaskDetail(authToken!!, userId)        call.enqueue(object : Callback<TaskResponse> {            override fun onFailure(call: Call<TaskResponse>, t: Throwable) {                if (swipeToRefresh != null)                    swipeToRefresh.setRefreshing(false)            }            override fun onResponse(call: Call<TaskResponse>, response: Response<TaskResponse>) {                if (response.code() == 200) {                    if (isAdded) {                        MyApplication.isHomeAPI = false                        val homeResponse = response.body()!!                        if (homeResponse.getStatus().equals(getString(R.string.str_success))) {                            val tData: java.util.ArrayList<TaskListModel> = java.util.ArrayList()                            val cList = homeResponse.getHome()!!.getCourseList()                            val mList = homeResponse.getHome()!!.getMomentList()                            val sList = homeResponse.getHome()!!.getSoundList()                            for (i in 0 until mList!!.size) {                                if (mList[i].getRewarded() == false) {                                    val taskDataModel = TaskListModel()                                    taskDataModel.moment = mList[i]                                    taskDataModel.type = "moments"                                    tData.add(taskDataModel)                                    break                                }                            }                            for (i in 0 until sList!!.size) {                                if (sList[i].rewarded == false) {                                    val taskDataModel = TaskListModel()                                    taskDataModel.sounds = sList[i]                                    taskDataModel.type = "sound"                                    tData.add(taskDataModel)                                    break                                }                            }                            for (i in 0 until cList!!.size) {                                val taskDataModel = TaskListModel()                                if (taskDataModel.chapter != null) {                                    break                                }                                if (cList[i].rewarded == false) {                                    taskDataModel.courseData = cList[i]                                    taskDataModel.type = "courses"                                    val chapterArrayList =                                        cList[i].chapters!!                                            .reversed() as java.util.ArrayList<ChapterListModel>                                    for (i in 0 until chapterArrayList!!.size) {                                        if (chapterArrayList[i].rewarded!! == false) {                                            taskDataModel.chapter = chapterArrayList[i]                                            tData.add(taskDataModel)                                            break                                        }                                    }                                }                            }                            val gson = Gson()                            val taskData = gson.toJson(tData)                            MyApplication.prefs!!.dailyTaskList = taskData                            MyApplication.prefs!!.courseCoin = homeResponse.getHome()!!.courseCoin                            MyApplication.prefs!!.momentCoin = homeResponse.getHome()!!.momentCoin                            MyApplication.prefs!!.soundsCoin = homeResponse.getHome()!!.soundsCoin                            setData()                        }                    }                }            }        })    }    fun setData() {        if (swipeToRefresh != null)            swipeToRefresh.setRefreshing(false)        val gson = Gson()        val taskdata = MyApplication.prefs!!.dailyTaskList.toString()        val type = object : TypeToken<java.util.ArrayList<TaskListModel?>?>() {}.type        val data = gson.fromJson<java.util.ArrayList<TaskListModel>>(            taskdata,            type        ) as ArrayList<TaskListModel>        if (data!!.size > 0) {            if (isAdded)            tvNoTask.visibility = View.GONE            rvTasks.adapter =                HomeTaskAdapter(data, requireContext(),this)        } else {            rvTasks.visibility = View.GONE            tvNoTask.visibility = View.VISIBLE        }    }    override fun onRefresh() {        getTaskDetail()    }    override fun onTaskHomeAdapterInteractionListener(dataModel: TaskListModel) {        if (dataModel.type.equals("moments")) {            val gson = Gson()            val jsonMoment = gson.toJson(dataModel.moment)            MyApplication.prefs!!.momentModel = jsonMoment            val intent = Intent(context, PlayTaskMomentsActivity::class.java)            intent.putExtra("m", "")            intent.putExtra("taskid", "")            startActivity(intent)        } else if (dataModel.type.equals("courses")) {            val gson = Gson()            val jsonChapter = gson.toJson(dataModel.chapter);            val jsonCourse = gson.toJson(dataModel.courseData);            MyApplication.prefs!!.chapterModel = jsonChapter            MyApplication.prefs!!.courseModel = jsonCourse            val intent = Intent(context, PlayerExoTaskActivity::class.java)            intent.putExtra("taskid", "")            startActivity(intent)        } else if (dataModel.type.equals("sound")) {            val momentModel = MomentListModel()            momentModel.setMomentId(dataModel.sounds!!.getSoundId())            momentModel.setTitle(dataModel.sounds!!.getTitle().toString())            momentModel.setSubtitle(dataModel.sounds!!.getSubtitle().toString())            momentModel.setImage(dataModel.sounds!!.image.toString())            momentModel.setMomentId(dataModel.sounds!!.getSoundId())            momentModel.setAudio(dataModel.sounds!!.getAudio().toString())            momentModel.setFreePaid(dataModel.sounds!!.getFreePaid().toString())            momentModel.purchased = dataModel.sounds!!.purchased            momentModel.coins = dataModel.sounds!!.coins            momentModel.coinForContent = dataModel.sounds!!.coinForContent            momentModel.setMinutes(dataModel.sounds!!.getMinutes().toString())            momentModel.setSeconds(dataModel.sounds!!.getSeconds().toString())            momentModel.setSeconds(dataModel.sounds!!.getSeconds().toString())            val gson = Gson()            val jsonMoment = gson.toJson(momentModel)            MyApplication.prefs!!.momentModel = jsonMoment            val intent = Intent(context, PlayTaskSoundActivity::class.java)            intent.putExtra("m", "")            intent.putExtra("taskid", "")            startActivity(intent)        }    }}