package com.getyoteam.budamind.fragmentimport android.graphics.Typefaceimport android.net.Uriimport android.os.Bundleimport androidx.fragment.app.Fragmentimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport com.getyoteam.budamind.Rimport androidx.core.content.ContextCompatimport android.view.Gravityimport android.widget.TextViewimport androidx.appcompat.widget.AppCompatTextViewimport androidx.core.widget.TextViewCompatimport androidx.viewpager.widget.ViewPagerimport com.getyoteam.budamind.adapter.LibraryViewPagerAdapterimport com.google.android.material.tabs.TabLayoutimport kotlinx.android.synthetic.main.actionbar_layout.tvHeaderimport kotlinx.android.synthetic.main.fragment_library.*/** * A simple [Fragment] subclass. * Activities that contain this fragment must implement the * [LibraryFragment.OnFragmentInteractionListener] interface * to handle interaction events. * Use the [LibraryFragment.newInstance] factory method to * create an instance of this fragment. * */class LibraryFragment(currunt: String?) : Fragment() {    private var listener: OnFragmentInteractionListener? = null    var curuntpos = currunt    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_library, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        setupViewPager(viewpager)        if (curuntpos!!.equals("COURSE")){            viewpager.setCurrentItem(0)        }else if(curuntpos!!.equals("MOMENT")){            viewpager.setCurrentItem(1)        }else if(curuntpos!!.equals("SOUND")){            viewpager.setCurrentItem(2)        }else{            viewpager.setCurrentItem(0)        }        tabs?.setupWithViewPager(viewpager)        tvHeader.text = getText(R.string.str_library)        val typefaceBold = Typeface.createFromAsset(requireActivity().assets, "nunitosans_bold.ttf")        val typefaceRegular = Typeface.createFromAsset(requireActivity().assets, "nunitosans_semibold.ttf")        val vg = tabs.getChildAt(0) as ViewGroup        val tabsCount = vg.childCount        for (i in 0 until tabsCount) {            val tv = LayoutInflater.from(requireActivity()).inflate(R.layout.custom_tab,null) as TextView            if(i==0){                tv.typeface = typefaceBold                tv.setTextColor(ContextCompat.getColor(requireActivity(),R.color.app_pink_color))            }else{                tv.typeface = typefaceRegular                tv.setTextColor(ContextCompat.getColor(requireActivity(),R.color.color_black))            }            tabs.getTabAt(i)?.setCustomView(tv)//            val vgTab = vg.getChildAt(i) as ViewGroup//            val tabChildsCount = vgTab.childCount//            for (j in 0 until tabChildsCount) {//                val tabViewChild = vgTab.getChildAt(j)//                if (tabViewChild is TextView) {//                    tabViewChild.typeface = typefaceRegular//                    tabViewChild.textSize = resources.getDimension(R.dimen._25ssp)//                }//            }        }        tabs.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {            override fun onTabReselected(p0: TabLayout.Tab?) {            }            override fun onTabUnselected(tab: TabLayout.Tab?) {                val view = tab?.customView as TextView                    view.typeface = typefaceRegular                view.setTextColor(ContextCompat.getColor(requireActivity(),R.color.color_black))            }            override fun onTabSelected(tab: TabLayout.Tab?) {                val view = tab?.customView as TextView                    view.typeface = typefaceBold                view.setTextColor(ContextCompat.getColor(requireActivity(),R.color.app_pink_color))            }        })    }//    private fun createCustomFontTextViewForTab(): AppCompatTextView {//        val customFontTextView = AppCompatTextView(context)//        customFontTextView.gravity = Gravity.CENTER//        TextViewCompat.setTextAppearance(customFontTextView, R.style.TabTextAppearance)//        return customFontTextView//    }    private fun setupViewPager(viewPager: ViewPager) {        val adapter = LibraryViewPagerAdapter(            requireActivity().getSupportFragmentManager(),            requireContext()        )        adapter.addFragment(CoursesFragment(), "Courses")        adapter.addFragment(MomentsFragment(), "Moments")        adapter.addFragment(SoundFragment("Home", "", ""), "Sounds")        viewPager.adapter = adapter    }    // TODO: Rename method, update argument and hook method into UI event    fun onButtonPressed(uri: Uri) {        listener?.onFragmentInteraction(uri)    }//    override fun onAttach(context: Context) {//        super.onAttach(context)//        if (context is OnFragmentInteractionListener) {//            listener = context//        } else {//            throw RuntimeException(context.toString() + " must implement OnFragmentInteractionListener")//        }//    }    override fun onDetach() {        super.onDetach()        listener = null    }    /**     * This interface must be implemented by activities that contain this     * fragment to allow an interaction in this fragment to be communicated     * to the activity and potentially other fragments contained in that     * activity.     *     *     * See the Android Training lesson [Communicating with Other Fragments]     * (http://developer.android.com/training/basics/fragments/communicating.html)     * for more information.     */    interface OnFragmentInteractionListener {        // TODO: Update argument type and name        fun onFragmentInteraction(uri: Uri)    }}