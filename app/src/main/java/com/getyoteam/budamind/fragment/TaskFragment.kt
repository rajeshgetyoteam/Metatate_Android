package com.getyoteam.budamind.fragmentimport android.content.Intentimport android.net.Uriimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.core.content.ContextCompatimport androidx.fragment.app.Fragmentimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport com.getyoteam.budamind.Model.TaskDataModelimport com.getyoteam.budamind.Model.TaskResponceModelimport com.getyoteam.budamind.MyApplicationimport com.getyoteam.budamind.Rimport com.getyoteam.budamind.activity.WalletActivityimport com.getyoteam.budamind.adapter.TaskAdapterimport com.getyoteam.budamind.interfaces.ApiUtilsimport com.google.firebase.dynamiclinks.DynamicLinkimport com.google.firebase.dynamiclinks.FirebaseDynamicLinksimport com.google.gson.Gsonimport com.google.gson.reflect.TypeTokenimport kotlinx.android.synthetic.main.actionbar_layout.tvHeaderimport kotlinx.android.synthetic.main.fragment_task.*import kotlinx.android.synthetic.main.fragment_task.swipeToRefreshimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass TaskFragment() : Fragment(), SwipeRefreshLayout.OnRefreshListener {    var sharingLink: Uri? = null    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_task, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        tvHeader.text = "00"        val c1 = ContextCompat.getColor(requireContext(), R.color.app_pink_color)        swipeToRefresh.setColorSchemeColors(c1)        swipeToRefresh.setOnRefreshListener(this)//        swipeToRefresh.setEnabled(true);        layWallet.setOnClickListener {            val intent = Intent(requireContext(), WalletActivity::class.java)            startActivity(intent)        }        tvInviteFriends.setOnClickListener {            val intent = Intent(Intent.ACTION_SEND)            /*This will be the actual content you wish you share.*/            intent.type = "text/plain"            /*Applying information Subject and Body.*/            intent.putExtra(                Intent.EXTRA_SUBJECT,                "Metatate"            )            intent.putExtra(Intent.EXTRA_TEXT, "Metatate" + "\n\n" + sharingLink.toString())            startActivity(Intent.createChooser(intent, "Share"))        }        rvTasks.setNestedScrollingEnabled(false);        val userId = MyApplication.prefs!!.userId        FirebaseDynamicLinks.getInstance().createDynamicLink()            .setLink(Uri.parse("https://www.budacoin.org/${userId}"))            .setDomainUriPrefix("https://budamind.page.link")            .setAndroidParameters(DynamicLink.AndroidParameters.Builder().build())            .setIosParameters(DynamicLink.IosParameters.Builder("com.getyoteam.budamind").build())            .buildShortDynamicLink()            .addOnSuccessListener { result ->                sharingLink = result.shortLink                Log.d("mytag", "sharingLink - ${sharingLink}")            }            .addOnFailureListener {                Log.d("mytag", "exception - ${it.localizedMessage}")                Toast.makeText(requireContext(), "Please try Again", Toast.LENGTH_SHORT).show()            }    }    override fun onResume() {        super.onResume()        var data = MyApplication.prefs!!.taskResponce        if (data.isNullOrBlank()) {            getTasks()        } else {            setData()        }    }    private fun getTasks() {        val userId = MyApplication.prefs!!.userId        swipeToRefresh.setRefreshing(true)        val call = ApiUtils.getAPIService().getTask(userId)        call.enqueue(object : Callback<TaskResponceModel> {            override fun onFailure(call: Call<TaskResponceModel>, t: Throwable) {                if (swipeToRefresh != null)                    swipeToRefresh.setRefreshing(false)                Toast.makeText(                    requireContext(),                    getString(R.string.str_something_went_wrong),                    Toast.LENGTH_SHORT                )                    .show()                Log.d("onFailure", t.message)            }            override fun onResponse(                call: Call<TaskResponceModel>,                response: Response<TaskResponceModel>            ) {                if (response.code() == 200) {                    if (swipeToRefresh != null)                        swipeToRefresh.setRefreshing(false);                    val commonModel = response.body()                    if (commonModel!!.status.equals(getString(R.string.str_success))) {                        var data: ArrayList<TaskDataModel>? = null                        val gson = Gson()                        var meditationStateModel = commonModel.meditationState                        val jsonMeditation = gson.toJson(meditationStateModel)                        MyApplication.prefs!!.stateModel = jsonMeditation                        val taskData = gson.toJson(commonModel.tasks)                        MyApplication.prefs!!.taskResponce = taskData                        setData()//                        val gson = Gson()                    }                }            }        })    }    fun setData() {        val gson = Gson()        var taskdata = MyApplication.prefs!!.taskResponce.toString()        val type = object : TypeToken<java.util.ArrayList<TaskDataModel?>?>() {}.type        var data = gson.fromJson<java.util.ArrayList<TaskDataModel>>(            taskdata,            type        ) as ArrayList<TaskDataModel>        if (data!!.size > 0) {            if (data.size > 10) {                tvHeader.text = data.size.toString()            } else {                tvHeader.text = "0" + data.size.toString()            }            tvNoTask.visibility = View.GONE            rvTasks.adapter =                TaskAdapter(data, requireContext())        } else {            tvHeader.text = "00"            tvNoTask.visibility = View.VISIBLE        }    }    override fun onRefresh() {        getTasks()    }}